[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SP",
    "section": "",
    "text": "modeling\n\n\n\n\nTricks to transform a optimization model into a linear program\n\n\n\n\n\n\nNov 30, 2022\n\n\ncbarz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nquarto\n\n\n\n\nQuick introduction to use citation and footnotes in quarto\n\n\n\n\n\n\nNov 29, 2022\n\n\ncbarz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntest\n\n\n\n\njupyter notebook to test pyomo and solver installation\n\n\n\n\n\n\nNov 27, 2022\n\n\ncbarz\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "nbs/20221129_citation/index.html",
    "href": "nbs/20221129_citation/index.html",
    "title": "Citation and Footnotes in quarto",
    "section": "",
    "text": "footnotes:\n\nmarkdown footnote syntax (as I have to look this up regularly)\n\ncitations:\n\nexplain initial setup including a test\nexplain steps to generate citations and a bibliography with quarto"
  },
  {
    "objectID": "nbs/20221129_citation/index.html#input",
    "href": "nbs/20221129_citation/index.html#input",
    "title": "Citation and Footnotes in quarto",
    "section": "3.1 input",
    "text": "3.1 input\nHere is a footnote reference,[^1] and another.[^longnote]\n\n[^1]: Here is the footnote.\n[^longnote]: Here's one with multiple blocks.\n\n    Subsequent paragraphs are indented to show that they\nbelong to the previous footnote.\n\n        { some.code }\n\n    The whole paragraph can be indented, or just the first\n    line.  In this way, multi-paragraph footnotes work like\n    multi-paragraph list items.\n\nThis paragraph won't be part of the note, because it\nisn't indented.\nRemark: The content of the footnote, e.g. [^1]: Here is the footnote. can be placed anywhere in the document. I usually put it at the end of the document, because some footnotes are used more than once."
  },
  {
    "objectID": "nbs/20221129_citation/index.html#output",
    "href": "nbs/20221129_citation/index.html#output",
    "title": "Citation and Footnotes in quarto",
    "section": "3.2 output",
    "text": "3.2 output\nHere is a footnote reference,1 and another.2\nThis paragraph won’t be part of the note, because it isn’t indented."
  },
  {
    "objectID": "nbs/20221129_citation/index.html#inline-footnote",
    "href": "nbs/20221129_citation/index.html#inline-footnote",
    "title": "Citation and Footnotes in quarto",
    "section": "3.3 inline footnote",
    "text": "3.3 inline footnote\nHere is an inline note.^[Inlines notes are easier to write,\nsince you don't have to pick an identifier and move down to\ntype the note.]\nHere is an inline note.3"
  },
  {
    "objectID": "nbs/20221129_citation/index.html#bibliography-generation",
    "href": "nbs/20221129_citation/index.html#bibliography-generation",
    "title": "Citation and Footnotes in quarto",
    "section": "5.1 Bibliography Generation",
    "text": "5.1 Bibliography Generation\nSupose you want to add a new reference to your citation database references.bib, e.g. (Trotta et al. 2022). I usually do the following:\n\nopen google scholar\nsearch for your reference, e.g. “trotta routing on a ring”\nuse the nice link “citation” below the hit of google scholar and choose BibTex next\nsimply copy and paste the content to your references.bib file. The copied content will look like:\n\n@article{trotta2022pickup,\n  title={Pickup and delivery problems with autonomous vehicles on rings},\n  author={Trotta, Manuel and Archetti, Claudia and Feillet, Dominique and Quilliot, Alain},\n  journal={European Journal of Operational Research},\n  volume={300},\n  number={1},\n  pages={221--236},\n  year={2022},\n  publisher={Elsevier}\n}"
  },
  {
    "objectID": "nbs/20221129_citation/index.html#add-a-citation-in-a-blog-document",
    "href": "nbs/20221129_citation/index.html#add-a-citation-in-a-blog-document",
    "title": "Citation and Footnotes in quarto",
    "section": "5.2 Add a citation in a blog document",
    "text": "5.2 Add a citation in a blog document\n\nMarkdown format for citation is [@citation]\nGiven example: [@trotta2022pickup] renders to (Trotta et al. 2022)\nThere are other markdown format for citation, e.g. @trotta2022pickup renders to Trotta et al. (2022). For more information just have a look at the sources below."
  },
  {
    "objectID": "nbs/20221130_modeling_tips/index.html",
    "href": "nbs/20221130_modeling_tips/index.html",
    "title": "Linear programming tricks",
    "section": "",
    "text": "2 Summary\nIn this post we saw a number of tricks to transform special models into a linear program and mentioned typical applications. We saw how to handle absolute values, minimax objectives, fractional objectives and range contraints.\n\n\n\n\n\n\nReferences\n\nBisschop, Johannes. 2006. AIMMS Optimization Modeling. Lulu. com.\n\nFootnotes\n\n\nTricks for integer programming models will be part of another blog post.↩︎"
  },
  {
    "objectID": "nbs/20221127_jupyter_test/index.html",
    "href": "nbs/20221127_jupyter_test/index.html",
    "title": "Pyomo and solver test",
    "section": "",
    "text": "We give the implementation of a simple model in pyomo to test the correct installation and in particular the solvers.\nExpectation: code is executed without errors\n\n\nconda env create -f environment.yml\nconda activate blog\n\nimport pyomo.environ as pyo\n\n\nmodel = pyo.ConcreteModel()\n\nmodel.x = pyo.Var([1,2], domain=pyo.NonNegativeReals)\n\nmodel.OBJ = pyo.Objective(expr = 2*model.x[1] + 3*model.x[2])\n\nmodel.Constraint1 = pyo.Constraint(expr = 3*model.x[1] + 4*model.x[2] >= 1)\n\n\nglpk_test = pyo.SolverFactory('glpk')\ncbc_test = pyo.SolverFactory('cbc')\nipopt_test = pyo.SolverFactory('ipopt')\n\n\nglpk_test.solve(model)\n\n{'Problem': [{'Name': 'unknown', 'Lower bound': 0.666666666666667, 'Upper bound': 0.666666666666667, 'Number of objectives': 1, 'Number of constraints': 2, 'Number of variables': 3, 'Number of nonzeros': 3, 'Sense': 'minimize'}], 'Solver': [{'Status': 'ok', 'Termination condition': 'optimal', 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Error rc': 0, 'Time': 0.013138532638549805}], 'Solution': [OrderedDict([('number of solutions', 0), ('number of solutions displayed', 0)])]}\n\n\n\nmodel.pprint()\n\n1 Set Declarations\n    x_index : Size=1, Index=None, Ordered=Insertion\n        Key  : Dimen : Domain : Size : Members\n        None :     1 :    Any :    2 : {1, 2}\n\n1 Var Declarations\n    x : Size=2, Index=x_index\n        Key : Lower : Value             : Upper : Fixed : Stale : Domain\n          1 :     0 : 0.333333333333333 :  None : False : False : NonNegativeReals\n          2 :     0 :               0.0 :  None : False : False : NonNegativeReals\n\n1 Objective Declarations\n    OBJ : Size=1, Index=None, Active=True\n        Key  : Active : Sense    : Expression\n        None :   True : minimize : 2*x[1] + 3*x[2]\n\n1 Constraint Declarations\n    Constraint1 : Size=1, Index=None, Active=True\n        Key  : Lower : Body            : Upper : Active\n        None :   1.0 : 3*x[1] + 4*x[2] :  +Inf :   True\n\n4 Declarations: x_index x OBJ Constraint1\n\n\n\ncbc_test.solve(model)\n\n{'Problem': [{'Name': 'unknown', 'Lower bound': 0.6666666667, 'Upper bound': 0.6666666667, 'Number of objectives': 1, 'Number of constraints': 2, 'Number of variables': 3, 'Number of nonzeros': 0, 'Sense': 'minimize'}], 'Solver': [{'Status': 'ok', 'User time': -1.0, 'System time': 0.0, 'Wallclock time': 0.0, 'Termination condition': 'optimal', 'Termination message': 'Model was solved to optimality (subject to tolerances), and an optimal solution is available.', 'Statistics': {'Branch and bound': {'Number of bounded subproblems': None, 'Number of created subproblems': None}, 'Black box': {'Number of iterations': 0}}, 'Error rc': 0, 'Time': 0.04025125503540039}], 'Solution': [OrderedDict([('number of solutions', 0), ('number of solutions displayed', 0)])]}\n\n\n\nmodel.pprint()\n\n1 Set Declarations\n    x_index : Size=1, Index=None, Ordered=Insertion\n        Key  : Dimen : Domain : Size : Members\n        None :     1 :    Any :    2 : {1, 2}\n\n1 Var Declarations\n    x : Size=2, Index=x_index\n        Key : Lower : Value      : Upper : Fixed : Stale : Domain\n          1 :     0 : 0.33333333 :  None : False : False : NonNegativeReals\n          2 :     0 :        0.0 :  None : False : False : NonNegativeReals\n\n1 Objective Declarations\n    OBJ : Size=1, Index=None, Active=True\n        Key  : Active : Sense    : Expression\n        None :   True : minimize : 2*x[1] + 3*x[2]\n\n1 Constraint Declarations\n    Constraint1 : Size=1, Index=None, Active=True\n        Key  : Lower : Body            : Upper : Active\n        None :   1.0 : 3*x[1] + 4*x[2] :  +Inf :   True\n\n4 Declarations: x_index x OBJ Constraint1\n\n\n\nipopt_test.solve(model)\n\n{'Problem': [{'Lower bound': -inf, 'Upper bound': inf, 'Number of objectives': 1, 'Number of constraints': 1, 'Number of variables': 2, 'Sense': 'unknown'}], 'Solver': [{'Status': 'ok', 'Message': 'Ipopt 3.14.11\\\\x3a Optimal Solution Found', 'Termination condition': 'optimal', 'Id': 0, 'Error rc': 0, 'Time': 0.05022311210632324}], 'Solution': [OrderedDict([('number of solutions', 0), ('number of solutions displayed', 0)])]}\n\n\n\nmodel.pprint()\n\n1 Set Declarations\n    x_index : Size=1, Index=None, Ordered=Insertion\n        Key  : Dimen : Domain : Size : Members\n        None :     1 :    Any :    2 : {1, 2}\n\n1 Var Declarations\n    x : Size=2, Index=x_index\n        Key : Lower : Value                   : Upper : Fixed : Stale : Domain\n          1 :     0 :      0.3333333343972087 :  None : False : False : NonNegativeReals\n          2 :     0 : -2.3599945501636825e-09 :  None : False : False : NonNegativeReals\n\n1 Objective Declarations\n    OBJ : Size=1, Index=None, Active=True\n        Key  : Active : Sense    : Expression\n        None :   True : minimize : 2*x[1] + 3*x[2]\n\n1 Constraint Declarations\n    Constraint1 : Size=1, Index=None, Active=True\n        Key  : Lower : Body            : Upper : Active\n        None :   1.0 : 3*x[1] + 4*x[2] :  +Inf :   True\n\n4 Declarations: x_index x OBJ Constraint1"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]